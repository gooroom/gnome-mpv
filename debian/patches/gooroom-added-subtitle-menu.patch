diff --git a/src/gmpv_menu.c b/src/gmpv_menu.c
index 8947c8f..dbe03dd 100644
--- a/src/gmpv_menu.c
+++ b/src/gmpv_menu.c
@@ -34,40 +34,40 @@ struct GmpvMenuEntry
 	GMenu *submenu;
 };
 
-//static void split_track_list(	const GPtrArray *track_list,
+static void split_track_list(	const GPtrArray *track_list,
 //				GPtrArray **audio_tracks,
 //				GPtrArray **video_tracks,
-//				GPtrArray **subtitle_tracks );
-//static GMenu *build_menu_from_track_list(	const GPtrArray *list,
-//						const gchar *action,
-//						const gchar *load_action );
+				GPtrArray **subtitle_tracks );
+static GMenu *build_menu_from_track_list(	const GPtrArray *list,
+						const gchar *action,
+						const gchar *load_action );
 static void build_menu(GMenu *menu, const GmpvMenuEntry *entries, gboolean flat);
 //static GMenu *build_video_track_menu(const GPtrArray *list);
 //static GMenu *build_audio_track_menu(const GPtrArray *list);
-//static GMenu *build_subtitle_track_menu(const GPtrArray *list);
+static GMenu *build_subtitle_track_menu(const GPtrArray *list);
 
-//static void split_track_list(	const GPtrArray *track_list,
+static void split_track_list(	const GPtrArray *track_list,
 //				GPtrArray **audio_tracks,
 //				GPtrArray **video_tracks,
-//				GPtrArray **subtitle_tracks )
-//{
-//	guint track_list_len = track_list?track_list->len:0;
-//
-//	g_assert(audio_tracks && video_tracks && subtitle_tracks);
-//
-//	/* The contents of these array are shallow-copied from track_list and
-//	 * therefore only the container should be freed.
-//	 */
+				GPtrArray **subtitle_tracks )
+{
+	guint track_list_len = track_list?track_list->len:0;
+
+	g_assert(/*audio_tracks && video_tracks && */subtitle_tracks);
+
+	/* The contents of these array are shallow-copied from track_list and
+	 * therefore only the container should be freed.
+	 */
 //	*audio_tracks = g_ptr_array_new();
 //	*video_tracks = g_ptr_array_new();
-//	*subtitle_tracks = g_ptr_array_new();
-//
-//	for(guint i = 0; i < track_list_len; i++)
-//	{
-//		GmpvTrack *track = g_ptr_array_index(track_list, i);
-//
-//		switch(track->type)
-//		{
+	*subtitle_tracks = g_ptr_array_new();
+
+	for(guint i = 0; i < track_list_len; i++)
+	{
+		GmpvTrack *track = g_ptr_array_index(track_list, i);
+
+		switch(track->type)
+		{
 //			case TRACK_TYPE_AUDIO:
 //			g_ptr_array_add(*audio_tracks, track);
 //			break;
@@ -76,82 +76,82 @@ static void build_menu(GMenu *menu, const GmpvMenuEntry *entries, gboolean flat)
 //			g_ptr_array_add(*video_tracks, track);
 //			break;
 //
-//			case TRACK_TYPE_SUBTITLE:
-//			g_ptr_array_add(*subtitle_tracks, track);
-//			break;
+			case TRACK_TYPE_SUBTITLE:
+			g_ptr_array_add(*subtitle_tracks, track);
+			break;
 //
 //			default:
 //			g_assert_not_reached();
 //			break;
-//		}
-//	}
-//}
+		}
+	}
+}
 
-//static GMenu *build_menu_from_track_list(	const GPtrArray *list,
-//						const gchar *action,
-//						const gchar *load_action )
-//{
-//	GMenu *menu = g_menu_new();
-//	const glong max_len = 32;
-//	gchar *detailed_action;
-//
-//	g_assert(list);
-//
-//	detailed_action = g_strdup_printf("%s(@x 0)", action);
-//
-//	g_menu_append(menu, _("None"), detailed_action);
-//	g_free(detailed_action);
-//
-//	for(guint i = 0; i < list->len; i++)
-//	{
-//		GmpvTrack *entry;
-//		glong entry_title_len;
-//		gchar *entry_title;
-//		gchar *title;
-//
-//		entry = g_ptr_array_index(list, i);
-//
-//		/* For simplicity, also dup the default string used when the
-//		 * track has no title.
-//		 */
-//		entry_title = g_strdup(entry->title?:_("Unknown"));
-//
-//		/* Maximum number of bytes per UTF-8 character is 4 */
-//		entry_title_len = g_utf8_strlen(entry_title, 4*(max_len+1));
-//
-//		if(entry_title_len > max_len)
-//		{
-//			/* Truncate the string */
-//			*(g_utf8_offset_to_pointer(entry_title, max_len)) = '\0';
-//		}
-//
-//		detailed_action
-//			= g_strdup_printf(	"%s(@x %" G_GINT64_FORMAT ")",
-//						action,
-//						entry->id );
-//
-//		/* Ellipsize the title if it's longer than max_len */
-//		title = g_strdup_printf(	entry->lang?
-//						"%s%s (%s)":"%s%s",
-//						entry_title,
-//						(entry_title_len > max_len)?
-//						"…":"",
-//						entry->lang );
-//
-//		g_menu_append(menu, title, detailed_action);
-//
-//		g_free(detailed_action);
-//		g_free(entry_title);
-//		g_free(title);
-//	}
-//
-//	if(load_action)
-//	{
-//		g_menu_append(menu, _("_Load External…"), load_action);
-//	}
-//
-//	return menu;
-//}
+static GMenu *build_menu_from_track_list(	const GPtrArray *list,
+						const gchar *action,
+						const gchar *load_action )
+{
+	GMenu *menu = g_menu_new();
+	const glong max_len = 32;
+	gchar *detailed_action;
+
+	g_assert(list);
+
+	detailed_action = g_strdup_printf("%s(@x 0)", action);
+
+	g_menu_append(menu, _("None"), detailed_action);
+	g_free(detailed_action);
+
+	for(guint i = 0; i < list->len; i++)
+	{
+		GmpvTrack *entry;
+		glong entry_title_len;
+		gchar *entry_title;
+		gchar *title;
+
+		entry = g_ptr_array_index(list, i);
+
+		/* For simplicity, also dup the default string used when the
+		 * track has no title.
+		 */
+		entry_title = g_strdup(entry->title?:_("Unknown"));
+
+		/* Maximum number of bytes per UTF-8 character is 4 */
+		entry_title_len = g_utf8_strlen(entry_title, 4*(max_len+1));
+
+		if(entry_title_len > max_len)
+		{
+			/* Truncate the string */
+			*(g_utf8_offset_to_pointer(entry_title, max_len)) = '\0';
+		}
+
+		detailed_action
+			= g_strdup_printf(	"%s(@x %" G_GINT64_FORMAT ")",
+						action,
+						entry->id );
+
+		/* Ellipsize the title if it's longer than max_len */
+		title = g_strdup_printf(	entry->lang?
+						"%s%s (%s)":"%s%s",
+						entry_title,
+						(entry_title_len > max_len)?
+						"…":"",
+						entry->lang );
+
+		g_menu_append(menu, title, detailed_action);
+
+		g_free(detailed_action);
+		g_free(entry_title);
+		g_free(title);
+	}
+
+	if(load_action)
+	{
+		g_menu_append(menu, _("_Load External…"), load_action);
+	}
+
+	return menu;
+}
 
 static void build_menu(GMenu *menu, const GmpvMenuEntry *entries, gboolean flat)
 {
@@ -215,29 +215,29 @@ static void build_menu(GMenu *menu, const GmpvMenuEntry *entries, gboolean flat)
 //			"win.load-track('audio-add')" );
 //}
 //
-//static GMenu *build_subtitle_track_menu(const GPtrArray *list)
-//{
-//	return	build_menu_from_track_list
-//		(	list,
-//			"win.set-subtitle-track",
-//			"win.load-track('sub-add')" );
-//}
+static GMenu *build_subtitle_track_menu(const GPtrArray *list)
+{
+	return	build_menu_from_track_list
+		(	list,
+			"win.set-subtitle-track",
+			"win.load-track('sub-add')" );
+}
 
 void gmpv_menu_build_full(GMenu *menu, const GPtrArray *track_list)
 {
 //	GPtrArray *audio_tracks = NULL;
 //	GPtrArray *video_tracks = NULL;
-//	GPtrArray *subtitle_tracks = NULL;
+	GPtrArray *subtitle_tracks = NULL;
 //	GMenu *video_menu = NULL;
 //	GMenu *audio_menu = NULL;
-//	GMenu *subtitle_menu = NULL;
+	GMenu *subtitle_menu = NULL;
 
-//	split_track_list
-//		(track_list, &audio_tracks, &video_tracks, &subtitle_tracks);
+	split_track_list
+		(track_list,/* &audio_tracks, &video_tracks,*/ &subtitle_tracks);
 
 //	video_menu = build_video_track_menu(video_tracks);
 //	audio_menu = build_audio_track_menu(audio_tracks);
-//	subtitle_menu = build_subtitle_track_menu(subtitle_tracks);
+	subtitle_menu = build_subtitle_track_menu(subtitle_tracks);
 
 	const GmpvMenuEntry entries[]
 		= {	{_("_File"), NULL, NULL},
@@ -249,7 +249,7 @@ void gmpv_menu_build_full(GMenu *menu, const GPtrArray *track_list)
 			{_("_Preferences"), "win.show-preferences-dialog", NULL},
 //			{_("_Video Track"), NULL, video_menu},
 //			{_("_Audio Track"), NULL, audio_menu},
-//			{_("S_ubtitle Track"), NULL, subtitle_menu},
+			{_("S_ubtitle Track"), NULL, subtitle_menu},
 			{_("_View"), NULL, NULL},
 			{_("_Toggle Controls"), "win.toggle-controls", NULL},
 			{_("_Toggle Playlist"), "win.toggle-playlist", NULL},
@@ -266,27 +266,27 @@ void gmpv_menu_build_full(GMenu *menu, const GPtrArray *track_list)
 
 //	g_ptr_array_free(audio_tracks, FALSE);
 //	g_ptr_array_free(video_tracks, FALSE);
-//	g_ptr_array_free(subtitle_tracks, FALSE);
+	g_ptr_array_free(subtitle_tracks, FALSE);
 //	g_object_unref(video_menu);
 //	g_object_unref(audio_menu);
-//	g_object_unref(subtitle_menu);
+	g_object_unref(subtitle_menu);
 }
 
 void gmpv_menu_build_menu_btn(GMenu *menu, const GPtrArray *track_list)
 {
 //	GPtrArray *audio_tracks = NULL;
 //	GPtrArray *video_tracks = NULL;
-//	GPtrArray *subtitle_tracks = NULL;
+	GPtrArray *subtitle_tracks = NULL;
 //	GMenu *video_menu = NULL;
 //	GMenu *audio_menu = NULL;
-//	GMenu *subtitle_menu = NULL;
+	GMenu *subtitle_menu = NULL;
 
-//	split_track_list
-//		(track_list, &audio_tracks, &video_tracks, &subtitle_tracks);
+	split_track_list
+		(track_list,/* &audio_tracks, &video_tracks, */&subtitle_tracks);
 
 //	video_menu = build_video_track_menu(video_tracks);
 //	audio_menu = build_audio_track_menu(audio_tracks);
-//	subtitle_menu = build_subtitle_track_menu(subtitle_tracks);
+	subtitle_menu = build_subtitle_track_menu(subtitle_tracks);
 
 	const GmpvMenuEntry entries[]
 		= {	{NULL, "", NULL},
@@ -297,8 +297,8 @@ void gmpv_menu_build_menu_btn(GMenu *menu, const GPtrArray *track_list)
 			{NULL, "", NULL},
 //			{_("_Video Track"), NULL, video_menu},
 //			{_("_Audio Track"), NULL, audio_menu},
-//			{_("S_ubtitle Track"), NULL, subtitle_menu},
-//			{NULL, "", NULL},
+			{_("S_ubtitle Track"), NULL, subtitle_menu},
+			{NULL, "", NULL},
 			{_("_Normal Size"), "win.set-video-size(@d 1)", NULL},
 			{_("_Double Size"), "win.set-video-size(@d 2)", NULL},
 			{_("_Half Size"), "win.set-video-size(@d 0.5)", NULL},
@@ -308,10 +308,10 @@ void gmpv_menu_build_menu_btn(GMenu *menu, const GPtrArray *track_list)
 
 //	g_ptr_array_free(audio_tracks, FALSE);
 //	g_ptr_array_free(video_tracks, FALSE);
-//	g_ptr_array_free(subtitle_tracks, FALSE);
+	g_ptr_array_free(subtitle_tracks, FALSE);
 //	g_object_unref(video_menu);
 //	g_object_unref(audio_menu);
-//	g_object_unref(subtitle_menu);
+	g_object_unref(subtitle_menu);
 }
 
 void gmpv_menu_build_open_btn(GMenu *menu)
